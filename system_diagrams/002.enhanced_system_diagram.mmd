graph TD
    classDef agent fill:#e6f3ff,stroke:#007bff,stroke-width:2px;
    classDef newAgent fill:#e6ffe6,stroke:#28a745,stroke-width:3px;
    classDef tool fill:#fff2cc,stroke:#ff9900,stroke-width:2px;
    classDef newTool fill:#ffe6cc,stroke:#fd7e14,stroke-width:3px;
    classDef state fill:#d4edda,stroke:#155724,stroke-width:2px;
    classDef decision fill:#f8d7da,stroke:#721c24,stroke-width:2px;
    classDef io fill:#f0f0f0,stroke:#333;
    classDef output fill:#f8f9fa,stroke:#6c757d,stroke-width:2px;

    subgraph "Enhanced System Architecture"
        direction TB

        Start(Start: main.py) --> |User Request| Init["initialize_state"]
        Init -.-> |writes initial data| StateDB[(Enhanced Shared State)]

        subgraph EnhancedPipeline [Enhanced Sequential Pipeline]
            Init --> Analyzer[CodeAnalyzerAgent]
            Analyzer --> |calls analyze_code_structure| T1(analyze_code_structure)
            T1 -.-> |writes static_analysis_report| StateDB

            StateDB -.-> |reads report| Designer[TestCaseDesignerAgent]
            Designer --> |calls generate_test_scenarios| T2(generate_test_scenarios)
            T2 -.-> |writes test_scenarios| StateDB

            StateDB -.-> |reads source_code & test_scenarios| Coverage[CoverageAnalyzerAgent]
            Coverage --> |calls calculate_coverage| T3(calculate_coverage)
            T3 -.-> |writes coverage_report| StateDB

            StateDB -.-> |reads scenarios| Implementer[TestImplementerAgent]
            Implementer --> |calls write_test_code| T4(write_test_code)
            T4 -.-> |writes generated_test_code| StateDB
        end

        subgraph "Enhanced RefinementLoop (LoopAgent, max 3 iterations)"
            Implementer --> Runner[Enhanced TestRunnerAgent]
            StateDB -.-> |reads source_code, generated_test_code| Runner
            Runner --> |calls enhanced execution tools| T5(Enhanced Test Execution)
            T5 --> |execution tracking| Tracker[ExecutionTracker]
            Tracker -.-> |writes test_results with metrics| StateDB

            StateDB -.-> |reads test_results, code, etc.| Debugger[DebuggerAndRefinerAgent]
            Debugger --> Decision{Tests Passed?}

            Decision -- "No" --> Debugger
            Debugger -.-> |writes updated generated_test_code| StateDB
            Debugger -- "Loop (next iteration)" --> Runner

            Decision -- "Yes" --> ExitLoop["tool: exit_loop"]
        end

        subgraph "Enhanced Reporting & Finalization"
            ExitLoop --> Reporter[ReportGeneratorAgent]
            RefinementLoop -- "on max iterations" --> Reporter
            StateDB -.-> |reads all analysis results| Reporter
            Reporter --> |calls report generation tools| T6(Report Generation Tools)
            T6 -.-> |writes comprehensive_report| StateDB

            Reporter --> Summarizer[ResultSummarizerAgent]
            StateDB -.-> |reads comprehensive_report| Summarizer
            Summarizer --> OutputGen["Generate Outputs"]
        end
    end

    subgraph "Output Structure"
        OutputGen --> TestSuite["output/final_test_suite.py"]
        OutputGen --> JSONReport["output/comprehensive_report.json"]
        OutputGen --> MDReport["output/analysis_report.md"]
        OutputGen --> Logs["output/execution_logs/"]
    end

    TestSuite --> End(End)
    JSONReport --> End
    MDReport --> End
    Logs --> End

    subgraph "Enhanced State Variables"
        StateDB -.-> StaticAnalysis["static_analysis_report"]
        StateDB -.-> TestScenarios["test_scenarios"]
        StateDB -.-> CoverageReport["coverage_report"]
        StateDB -.-> GeneratedCode["generated_test_code"]
        StateDB -.-> TestResults["test_results (with metrics)"]
        StateDB -.-> ComprehensiveReport["comprehensive_report"]
    end

    subgraph "Key Enhancements"
        Enhancement1["🎯 Coverage Analysis (≥80%)"]
        Enhancement2["📊 Quality Assessment (≥90%)"]
        Enhancement3["🔄 Execution Tracking (≥95%)"]
        Enhancement4["🔍 Root Cause Analysis (≥80%)"]
        Enhancement5["📋 Comprehensive Reporting"]
    end

    class Start,End,Init,OutputGen io;
    class Analyzer,Designer,Implementer,Runner,Debugger,Summarizer agent;
    class Coverage,Reporter newAgent;
    class T1,T2,T4 tool;
    class T3,T5,T6,Tracker newTool;
    class StateDB state;
    class Decision decision;
    class TestSuite,JSONReport,MDReport,Logs output;
